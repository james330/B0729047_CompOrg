// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/15/2019 15:05:28"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          wave
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module wave_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire QA0;
wire QA1;
wire QA2;
wire QA3;
wire QA4;
wire QA5;
wire QA6;
wire QB0;
wire QB1;
wire QB2;
wire QB3;
wire QB4;
wire QB5;
wire QB6;
wire QC0;
wire QC1;
wire QC2;
wire QC3;
wire QC4;
wire QC5;
wire QC6;
wire QD0;
wire QD1;
wire QD2;
wire QD3;
wire QD4;
wire QD5;
wire QD6;

// assign statements (if any)                          
wave i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.QA0(QA0),
	.QA1(QA1),
	.QA2(QA2),
	.QA3(QA3),
	.QA4(QA4),
	.QA5(QA5),
	.QA6(QA6),
	.QB0(QB0),
	.QB1(QB1),
	.QB2(QB2),
	.QB3(QB3),
	.QB4(QB4),
	.QB5(QB5),
	.QB6(QB6),
	.QC0(QC0),
	.QC1(QC1),
	.QC2(QC2),
	.QC3(QC3),
	.QC4(QC4),
	.QC5(QC5),
	.QC6(QC6),
	.QD0(QD0),
	.QD1(QD1),
	.QD2(QD2),
	.QD3(QD3),
	.QD4(QD4),
	.QD5(QD5),
	.QD6(QD6)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #1000 1'b1;
	#1000;
end 
endmodule

